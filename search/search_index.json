{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to Database Systems \u00b6 Welcome! This course is an introductory course to database systems. In this course, you will be touching both the theoritical fundations behind the database system (i.e. relational algebra and CNF) and the practical end of using an actual database management system with the help of a series of carefully designed assignments. Logistics \u00b6 Instructor: Wei Wang ( @\u6c6a\u536b ) Teaching Assistants: Zhifeng Hu ( @ichn-hu ), Yuan Sui Time and Location: Tue 11-13 at HGX202, Fri 8-9 at Computing Center 303, for now, the location is online. Grading: to be decided Q&A: Please use issues to ask questions or post about anything related to this course. Syllabus \u00b6 Week No. Date Content Additional Materials 3 2020-03-13 Assignment 1 Released 4 2020-03-20 Assignment 1 Due Assignment Guidance \u00b6 TODO Honor Code \u00b6 All the assignments are meant to be submitted under this GitHub repository, therefore it is publicly available to everyone, even before the deadline of each assignments. You should not peek into other's submission before you submitted your own solution to each assignment. We do not have any mechanism to enforce this, but you are fully trusted that you won't cheat. Please hold the honor code in your mind and do not cheat. Public discussions and question-answerings are welcomed, and you could look into others' solutions after your own submission to learn from others. Late Policy \u00b6 If you can't work out the assignments before the deadline, then by all means please let us know about your situation. All these assignments are designed for you to actually learn database systems happily. We understand the pressure you have with all the courses","title":"Welcome"},{"location":"#introduction-to-database-systems","text":"Welcome! This course is an introductory course to database systems. In this course, you will be touching both the theoritical fundations behind the database system (i.e. relational algebra and CNF) and the practical end of using an actual database management system with the help of a series of carefully designed assignments.","title":"Introduction to Database Systems"},{"location":"#logistics","text":"Instructor: Wei Wang ( @\u6c6a\u536b ) Teaching Assistants: Zhifeng Hu ( @ichn-hu ), Yuan Sui Time and Location: Tue 11-13 at HGX202, Fri 8-9 at Computing Center 303, for now, the location is online. Grading: to be decided Q&A: Please use issues to ask questions or post about anything related to this course.","title":"Logistics"},{"location":"#syllabus","text":"Week No. Date Content Additional Materials 3 2020-03-13 Assignment 1 Released 4 2020-03-20 Assignment 1 Due","title":"Syllabus"},{"location":"#assignment-guidance","text":"TODO","title":"Assignment Guidance"},{"location":"#honor-code","text":"All the assignments are meant to be submitted under this GitHub repository, therefore it is publicly available to everyone, even before the deadline of each assignments. You should not peek into other's submission before you submitted your own solution to each assignment. We do not have any mechanism to enforce this, but you are fully trusted that you won't cheat. Please hold the honor code in your mind and do not cheat. Public discussions and question-answerings are welcomed, and you could look into others' solutions after your own submission to learn from others.","title":"Honor Code"},{"location":"#late-policy","text":"If you can't work out the assignments before the deadline, then by all means please let us know about your situation. All these assignments are designed for you to actually learn database systems happily. We understand the pressure you have with all the courses","title":"Late Policy"},{"location":"assignment1/readme-obsolete/","text":"Assignment 1, Environment Setup \u00b6 This is the first assignment of the course, and it will guide you to setup an environment to be able to play with the actual database system. The primary database we will be using in this class is MySQL. MySQL is an open source relational database management system created by Oracle, and it is among the topest in the database market 1 and widely adopted by a lot of companies. The programming language we will be using in the series of assignments is golang, for its simplicity and the easy-to-use concurrency mechanism. Golang, developed by Google, is a statically typed programming langauge (we'll refer to golang as Go in the following content). It is becomming more and more popular in the recent several years, companies like Bilibili and Zhihu and so many more are using Go to build the backend of their applications, so it is very desirable and meaningful to start to learn this language. The goal of this assignment is to help you install MySQL on your development environment, and teaches you the basic usage of how to interact with MySQL using command line and programs. In this assignment, you are not required to actually write Go, but you should install the compiler and compile a Go program to interact with the database. Environment Reqirements \u00b6 The operating system is required to be Linux, ideally ubuntu, debian or archlinux, but most of the linux distributions should be fine. We do not have any support for other operating systems like Windows or MacOS, so if you are using any of them there are some suggestions for you: Install a virtual machine or dual-boot Linux (mostly recommended) Buy a VPS with Linux operating system, and use ssh to access it through out all the assignments Actually, MacOS and Windows should actually work, because the primary softwares we will be using, MySQl and Go, are all cross platform. However, MySQL as a software that runs in server, it is typically run on Linux, therefore to give you the most native experience of using MySQL, you are highly recommended to try to get access to an Linux operating system for the course. Install MySQL and Go \u00b6 If you think that I am going to teach you how to install them step by step, then you are too naive! Try to use google to search \"install A on B\", substitute A with \"MySQL\" or \"golang\" and B with the name of your operating system, such as \"install MySQL on Archilinux\" 2 . Note that we will be using MySQL version 8.0, so be careful not to install MySQL 5.7. Although I am not telling you the steps, there are some common pitfalls that you should be aware of: Do not leave the password blank when you are installing MySQL, give it a password for the root user, and memorize it. Later you will use this password as the root user to access the database. Well, if you are just too lazy, or can not find some good tutorial to teach you how to install them, here is the generous gift from your TA: https://db-engines.com/en/ranking \u21a9 If you do not have access to Google, you should work out a way to get access to it, here is a website that lists some mirror sites of Google that might be used in mainland China. If you failed to access Google after many attempts, then by all means try to use the international version of bing . \u21a9","title":"Assignment 1, Environment Setup"},{"location":"assignment1/readme-obsolete/#assignment-1-environment-setup","text":"This is the first assignment of the course, and it will guide you to setup an environment to be able to play with the actual database system. The primary database we will be using in this class is MySQL. MySQL is an open source relational database management system created by Oracle, and it is among the topest in the database market 1 and widely adopted by a lot of companies. The programming language we will be using in the series of assignments is golang, for its simplicity and the easy-to-use concurrency mechanism. Golang, developed by Google, is a statically typed programming langauge (we'll refer to golang as Go in the following content). It is becomming more and more popular in the recent several years, companies like Bilibili and Zhihu and so many more are using Go to build the backend of their applications, so it is very desirable and meaningful to start to learn this language. The goal of this assignment is to help you install MySQL on your development environment, and teaches you the basic usage of how to interact with MySQL using command line and programs. In this assignment, you are not required to actually write Go, but you should install the compiler and compile a Go program to interact with the database.","title":"Assignment 1, Environment Setup"},{"location":"assignment1/readme-obsolete/#environment-reqirements","text":"The operating system is required to be Linux, ideally ubuntu, debian or archlinux, but most of the linux distributions should be fine. We do not have any support for other operating systems like Windows or MacOS, so if you are using any of them there are some suggestions for you: Install a virtual machine or dual-boot Linux (mostly recommended) Buy a VPS with Linux operating system, and use ssh to access it through out all the assignments Actually, MacOS and Windows should actually work, because the primary softwares we will be using, MySQl and Go, are all cross platform. However, MySQL as a software that runs in server, it is typically run on Linux, therefore to give you the most native experience of using MySQL, you are highly recommended to try to get access to an Linux operating system for the course.","title":"Environment Reqirements"},{"location":"assignment1/readme-obsolete/#install-mysql-and-go","text":"If you think that I am going to teach you how to install them step by step, then you are too naive! Try to use google to search \"install A on B\", substitute A with \"MySQL\" or \"golang\" and B with the name of your operating system, such as \"install MySQL on Archilinux\" 2 . Note that we will be using MySQL version 8.0, so be careful not to install MySQL 5.7. Although I am not telling you the steps, there are some common pitfalls that you should be aware of: Do not leave the password blank when you are installing MySQL, give it a password for the root user, and memorize it. Later you will use this password as the root user to access the database. Well, if you are just too lazy, or can not find some good tutorial to teach you how to install them, here is the generous gift from your TA: https://db-engines.com/en/ranking \u21a9 If you do not have access to Google, you should work out a way to get access to it, here is a website that lists some mirror sites of Google that might be used in mainland China. If you failed to access Google after many attempts, then by all means try to use the international version of bing . \u21a9","title":"Install MySQL and Go"},{"location":"assignment1/readme/","text":"Assignment 1, Basic SQL \u00b6 This is the first assignment of the course, it asks you to write SQL to create tables and query from them. Basically you need to use create select where join group by order by having to be able to finish the assignment. Working Directory Setup \u00b6 This is the first step of the assignment, you need to get yourself familiar with git and GitHub. First of all, create a GitHub id if you do not yet have one. Then fork this project on GitHub, which will create a mirror repository under your own account. Then git clone your forked project in your local environment. You need to setup your GitHub account on your local machine for git if you have not yet done so. 1 git clone https://github.com/your-github-id/IDBS-Spring20-Fudan.git Once you've cloned the project in your local environment, get to IDBS-Spring20-Fudan/assignments/ass1/submission and create a directory and name it by your student id, for example IDBS-Spring20-Fudan/assignments/ass1/submission/16307130177 , and this directory will be your working directory. You are ONLY allowed to modify files under this directory, any other modifications outside this directory will make your submission invalid. Table Creation \u00b6 You need to create 3 tables under the database ass1 , namely employee , book and record . Create a file named create_table.sql under your working directory, and write the SQL to create the tables asked in that file. The constraint for each table is: employee has 4 columns, id , name , office and age , where id is the primary key and name and office is ascii string with length smaller than 32, while age is number between 0 and 100. Choose appropriate type for each column. book also has 4 columns, id , name , author and publisher , where id is the primary key and other columns are all ascii string with length smaller than 32. record has 3 columns, book_id , employee_id and time , where the two IDs are foreign keys that references the id column of book and employee , and time is of type DATE . Once you finished the table creation SQLs, create a database in your MySQL named ass1 , and then run the following command in your command line with username replaced by your username (such as root ), the command asks the MySQL client to connect to the MySQL server running at localhost on behalf of the user specified by the username and run the SQLs in the given file create_table.sql under database ass1 . 1 mysql -h localhost -u username ass1 -p < create_table.sql If mysql complains about any error, try to fix it in create_table.sql . You could drop and recreate the database ass1 if you've ruined the database with wrongly created tables. Once you've created the table, take a look at assignments/ass1/insert_data.sql , which inserts sample data into your newly created tables, run them through MySQL client as well: 1 mysql -h localhost -u username ass1 -p < ../../insert_data.sql The data is meant for you to play with the database and test with your own SQLs. If you could not run them, it means the tables you've created using create_table.sql is wrong, please double check that your table creation SQLs are correct. Query from the Database \u00b6 In this part, you are going to write queries to play with the database you just created. For each part, create a file in your working directory, for example 1.sql , 2.sql etc. Query all fields for employees named Jones Query the name of employees with ID equals to 1 or 2 (order does not matter) Query the name of all employees except the one whose ID is 1 (ordered by ID) Query the name of all employees with age between 25 and 30 (inclusively, ordered by ID) Query all fields for employees whose name started with J (ordered by age) Query the names of all publishers, if one publisher has more than two books in the database, output the name of the publisher only once (ordered by name, ascii order) Query the id of all books that is borrowed after 2016-10-31 , also the IDs should be distinct (ordered by id) Query for each employee who has borrowed book more than once, output the id , name , and number of borrow record (name the field num ), ordered by num in descending order. This one is kind of challenging, the TA's solution uses JOIN, GROUP BY, HAVING and ORDER BY, check them out if you don't know what these key words mean for MySQL. Submit Your Solution \u00b6 Make sure you have files create_table.sql 1.sql , ..., 8.sql in your working directory. Then use the following command to submit these files (run it at your working directory). 1 2 3 git add . # add your submission into git git commit -m \"submission of xxx for ass1\" # identify your submission git push # push your local submission to your remote forked repository And then get to your GitHub page and create a pull request 1 . The time you create the pull request will be considered as the submission time. Note : the submitted files will be evaluated using an automatic script written in golang, the script will later be uploaded, so make sure you follow all these instructions to make the file hiearchy correct, otherwise the script won't work and you will lose the mark. Also, do not cheat by looking at other's submission, it violates our honor code. Should you have any question, try to search it using Google first. If want clarification of the assignment, then please create an issue in the project repository. References \u00b6 There are many tutorials online about how to write SQL, you might find the following links helpful MySQL Tutorial MySQL Tutorial https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request-from-a-fork \u21a9","title":"Instruction"},{"location":"assignment1/readme/#assignment-1-basic-sql","text":"This is the first assignment of the course, it asks you to write SQL to create tables and query from them. Basically you need to use create select where join group by order by having to be able to finish the assignment.","title":"Assignment 1, Basic SQL"},{"location":"assignment1/readme/#working-directory-setup","text":"This is the first step of the assignment, you need to get yourself familiar with git and GitHub. First of all, create a GitHub id if you do not yet have one. Then fork this project on GitHub, which will create a mirror repository under your own account. Then git clone your forked project in your local environment. You need to setup your GitHub account on your local machine for git if you have not yet done so. 1 git clone https://github.com/your-github-id/IDBS-Spring20-Fudan.git Once you've cloned the project in your local environment, get to IDBS-Spring20-Fudan/assignments/ass1/submission and create a directory and name it by your student id, for example IDBS-Spring20-Fudan/assignments/ass1/submission/16307130177 , and this directory will be your working directory. You are ONLY allowed to modify files under this directory, any other modifications outside this directory will make your submission invalid.","title":"Working Directory Setup"},{"location":"assignment1/readme/#table-creation","text":"You need to create 3 tables under the database ass1 , namely employee , book and record . Create a file named create_table.sql under your working directory, and write the SQL to create the tables asked in that file. The constraint for each table is: employee has 4 columns, id , name , office and age , where id is the primary key and name and office is ascii string with length smaller than 32, while age is number between 0 and 100. Choose appropriate type for each column. book also has 4 columns, id , name , author and publisher , where id is the primary key and other columns are all ascii string with length smaller than 32. record has 3 columns, book_id , employee_id and time , where the two IDs are foreign keys that references the id column of book and employee , and time is of type DATE . Once you finished the table creation SQLs, create a database in your MySQL named ass1 , and then run the following command in your command line with username replaced by your username (such as root ), the command asks the MySQL client to connect to the MySQL server running at localhost on behalf of the user specified by the username and run the SQLs in the given file create_table.sql under database ass1 . 1 mysql -h localhost -u username ass1 -p < create_table.sql If mysql complains about any error, try to fix it in create_table.sql . You could drop and recreate the database ass1 if you've ruined the database with wrongly created tables. Once you've created the table, take a look at assignments/ass1/insert_data.sql , which inserts sample data into your newly created tables, run them through MySQL client as well: 1 mysql -h localhost -u username ass1 -p < ../../insert_data.sql The data is meant for you to play with the database and test with your own SQLs. If you could not run them, it means the tables you've created using create_table.sql is wrong, please double check that your table creation SQLs are correct.","title":"Table Creation"},{"location":"assignment1/readme/#query-from-the-database","text":"In this part, you are going to write queries to play with the database you just created. For each part, create a file in your working directory, for example 1.sql , 2.sql etc. Query all fields for employees named Jones Query the name of employees with ID equals to 1 or 2 (order does not matter) Query the name of all employees except the one whose ID is 1 (ordered by ID) Query the name of all employees with age between 25 and 30 (inclusively, ordered by ID) Query all fields for employees whose name started with J (ordered by age) Query the names of all publishers, if one publisher has more than two books in the database, output the name of the publisher only once (ordered by name, ascii order) Query the id of all books that is borrowed after 2016-10-31 , also the IDs should be distinct (ordered by id) Query for each employee who has borrowed book more than once, output the id , name , and number of borrow record (name the field num ), ordered by num in descending order. This one is kind of challenging, the TA's solution uses JOIN, GROUP BY, HAVING and ORDER BY, check them out if you don't know what these key words mean for MySQL.","title":"Query from the Database"},{"location":"assignment1/readme/#submit-your-solution","text":"Make sure you have files create_table.sql 1.sql , ..., 8.sql in your working directory. Then use the following command to submit these files (run it at your working directory). 1 2 3 git add . # add your submission into git git commit -m \"submission of xxx for ass1\" # identify your submission git push # push your local submission to your remote forked repository And then get to your GitHub page and create a pull request 1 . The time you create the pull request will be considered as the submission time. Note : the submitted files will be evaluated using an automatic script written in golang, the script will later be uploaded, so make sure you follow all these instructions to make the file hiearchy correct, otherwise the script won't work and you will lose the mark. Also, do not cheat by looking at other's submission, it violates our honor code. Should you have any question, try to search it using Google first. If want clarification of the assignment, then please create an issue in the project repository.","title":"Submit Your Solution"},{"location":"assignment1/readme/#references","text":"There are many tutorials online about how to write SQL, you might find the following links helpful MySQL Tutorial MySQL Tutorial https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request-from-a-fork \u21a9","title":"References"}]}